{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Importing the right Python libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt \n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Opening the all_free.txt file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_free_tree = pd.read_csv('/home/tomi/prediction/all_free.txt', delimiter = ' ', names = ['day', 'my_date', 'user_id', 'event_type'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data cleaning and formatting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "daily_free = all_free_tree.groupby('my_date').count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "right_format = daily_free.reset_index(drop = True).event_type"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Defining the x and y values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = right_format.index\n",
    "y = right_format.values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fitting the Linear Regression model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "coefs = np.polyfit(x,y,1)\n",
    "predict = np.poly1d(coefs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([  51.60695371, -800.32370008])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "coefs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Getting the R-squared value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.855186969163221"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import r2_score\n",
    "r2_score(y, predict(x))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Visualizing the data and the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fa0333ad400>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x_test = np.linspace(0, 210)\n",
    "y_pred = predict(x_test[:, None])\n",
    "plt.scatter(x, y)\n",
    "plt.plot(x_test, y_pred, c = 'r')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10243.56439317475"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predict(186+28)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The same with Polynomial Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "coefs = np.polyfit(x,y,3)\n",
    "predict = np.poly1d(coefs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fa03331d588>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x_test = np.linspace(0, 210)\n",
    "y_pred = predict(x_test[:, None])\n",
    "plt.scatter(x, y)\n",
    "plt.plot(x_test, y_pred, c = 'r')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "18429.698133084155"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predict(186+28)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
